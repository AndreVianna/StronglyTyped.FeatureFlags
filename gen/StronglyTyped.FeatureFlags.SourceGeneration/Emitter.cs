namespace StronglyTyped.FeatureFlags.Generator;

internal class Emitter {
    private const int _defaultStringBuilderCapacity = 1024;
    private readonly StringBuilder _builder = new(_defaultStringBuilderCapacity);

    internal void EmitFiles(SourceProductionContext context, IReadOnlyList<FlagsSelector> flagsSelectors) {
        foreach (var flagsSelector in flagsSelectors) {
            context.CancellationToken.ThrowIfCancellationRequested();
            var interfaceCode = EmitInterface(flagsSelector);
            context.AddSource($"I{flagsSelector.Name}.g.cs", SourceText.From(interfaceCode, Encoding.UTF8));

            var classCode = EmitClass(flagsSelector);
            context.AddSource($"{flagsSelector.Name}.g.cs", SourceText.From(classCode, Encoding.UTF8));
        }
    }

    private string EmitInterface(FlagsSelector flagsSelector) {
        _builder.Clear();
        _builder.AppendLine("// <auto-generated/>");
        _builder.AppendLine("#nullable enable");
        GenInterface(flagsSelector);
        return _builder.ToString();
    }

    private string EmitClass(FlagsSelector flagsSelector) {
        _builder.Clear();
        _builder.AppendLine("// <auto-generated/>");
        _builder.AppendLine("#nullable enable");
        GenClass(flagsSelector);
        return _builder.ToString();
    }

    private void GenInterface(FlagsSelector flagsSelector) {
        _builder.Append("" +
@$"
using StronglyTyped.FeatureFlags;

namespace {flagsSelector.Namespace};

public interface I{flagsSelector.Name}
{{
");
        foreach (var feature in flagsSelector.Features) {
            _builder.Append("" +
@$"    IFlag {feature} {{ get; }}
");
        }
        _builder.Append("" +
@$"}}
");
        _builder.ToString();
    }


    private void GenClass(FlagsSelector flagsSelector) {
        _builder.Append("" +
@$"
using StronglyTyped.FeatureFlags;

namespace {flagsSelector.Namespace};

partial class {flagsSelector.Name} : I{flagsSelector.Name}
{{
    private readonly IFlagsFactory _flagsFactory;

    public {flagsSelector.Name}(IFlagsFactory flagsFactory)
    {{
        _flagsFactory = flagsFactory;
    }}
");

        foreach (var feature in flagsSelector.Features) {
            _builder.Append("" +
@$"    public IFlag {feature} => _flagsFactory.For(nameof({feature}));
");
        }
        _builder.Append("" +
        @$"}}
");
    }
}
