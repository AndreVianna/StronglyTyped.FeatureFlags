namespace StronglyTyped.FeatureFlags.SourceGeneration.Tests;
using static RoslynTestUtils;

public class SourceGenerationTests {


    const string _emptyInterfaceCode = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface IFeatureAccessor
{
}
";

    const string _emptyClassCode = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class FeatureAccessor : IFeatureAccessor
{
    private readonly IFlagsFactory _flagsFactory;

    public FeatureAccessor(IFlagsFactory flagsFactory)
    {
        _flagsFactory = flagsFactory;
    }
}
";


    const string _validInterfaceCode = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface IFeatureAccessor
{
    IFlag SaluteUniverse { get; }
    IFlag OtherFeature { get; }
}
";

    const string _validClassCode = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class FeatureAccessor : IFeatureAccessor
{
    private readonly IFlagsFactory _flagsFactory;

    public FeatureAccessor(IFlagsFactory flagsFactory)
    {
        _flagsFactory = flagsFactory;
    }
    public IFlag SaluteUniverse => _flagsFactory.For(nameof(SaluteUniverse));
    public IFlag OtherFeature => _flagsFactory.For(nameof(OtherFeature));
}
";

    [Theory]
    [InlineData("string")]
    [InlineData("String")]
    [InlineData("System.String")]
    public async Task ValidCode(string arrayType) {
        var code = @$"
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeatureFlagsSelector]
public partial class FeatureAccessor {{
    private static readonly {arrayType}[] _availableFeatures = {{
        ""SaluteUniverse"",
        ""OtherFeature""
    }};
}}
";

        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_validInterfaceCode);
        resultedCode[1].SourceText.ToString().Should().Be(_validClassCode);
    }

    [Fact]
    public async Task ClassWithoutAttribute() {
        const string code = @"
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public partial class FeatureAccessor {
    private static readonly string[] _availableFeatures = {
        ""SaluteUniverse"",
        ""OtherFeature""
    };
}
";

        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(0);
    }

    [Fact]
    public async Task ClassWithSomeOtherAttribute() {
        const string code = @"
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[Obsolete]
public partial class FeatureAccessor {
    private static readonly string[] _availableFeatures = {
        ""SaluteUniverse"",
        ""OtherFeature""
    };
}
";

        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(0);
    }

    [Fact]
    public async Task MissingNamespace() {
        const string code = @"
using StronglyTyped.FeatureFlags;

[FeatureFlagsSelector]
public partial class FeatureAccessor {
    private static readonly string[] _availableFeatures = {
        ""SaluteUniverse"",
        ""OtherFeature""
    };
}
";

        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(0);
    }

    [Fact]
    public async Task NotArrayOfDifferentType() {
        const string code = @"
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeatureFlagsSelector]
public partial class FeatureAccessor {
    private static readonly int[] _availableFeatures = {
        1,
        2
    };
}
";


        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterfaceCode);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClassCode);
    }

    [Fact]
    public async Task EmptyStringArray() {
        const string code = @"
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeatureFlagsSelector]
public partial class FeatureAccessor {
    private static readonly String[] _availableFeatures = {
    };
}
";

        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterfaceCode);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClassCode);
    }

    [Fact]
    public async Task WithOldNamespacesStyle() {
        const string code = @"
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests {
    [FeatureFlagsSelector]
    public partial class FeatureAccessor {
        private static readonly string[] _availableFeatures = {
            ""SaluteUniverse"",
            ""OtherFeature""
        };
    }
}
";

        var (diagnostics, resultedCode) = await RunGeneratorAsync(code);

        diagnostics.Length.Should().Be(0);
        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_validInterfaceCode);
        resultedCode[1].SourceText.ToString().Should().Be(_validClassCode);
    }
}
