using StronglyTyped.FeatureFlags.SourceGeneration.Tests.Helpers;

namespace StronglyTyped.FeatureFlags.SourceGeneration.Tests;

[ExcludeFromCodeCoverage]
public class SourceGenerationTests {

    #region content strings
    private const string _emptyInterface = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface ITestFeatures
{
}
";

    private const string _emptyClass = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class TestFeatures : ITestFeatures
{
    private readonly IFeatureReader _featureReader;

    public TestFeatures(IFeatureReader featureReader)
    {
        _featureReader = featureReader;
    }
}
";

    private const string _interfaceWithTwoProperties = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface ITestFeatures
{
    IFeatureState Feature1 { get; }
    IFeatureState Feature2 { get; }
}
";

    private const string _classWithTwoProperties = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class TestFeatures : ITestFeatures
{
    private readonly IFeatureReader _featureReader;

    public TestFeatures(IFeatureReader featureReader)
    {
        _featureReader = featureReader;
    }

    public IFeatureState Feature1 => _featureReader.For(""Feature1"");
    public IFeatureState Feature2 => _featureReader.For(""Feature2"");
}
";


    private const string _interfaceWithSubSection = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface ITestFeatures
{
    IFeatureState Feature1 { get; }
    IFeatureState Feature2 { get; }

    ITestSubFeatures TestSubFeatures { get; }
}
";

    private const string _classWithSubSection = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class TestFeatures : ITestFeatures
{
    private readonly IFeatureReader _featureReader;

    public TestFeatures(IFeatureReader featureReader)
    {
        _featureReader = featureReader;
        TestSubFeatures = new TestSubFeatures(_featureReader);
    }

    public IFeatureState Feature1 => _featureReader.For(""Feature1"");
    public IFeatureState Feature2 => _featureReader.For(""Feature2"");

    public ITestSubFeatures TestSubFeatures { get; }
}
";

    private const string _emptySubSectionInterface = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface ITestSubFeatures
{
}
";

    private const string _emptySubSectionClass = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class TestSubFeatures : ITestSubFeatures
{
    private readonly IFeatureReader _featureReader;

    public TestSubFeatures(IFeatureReader featureReader)
    {
        _featureReader = featureReader;
    }
}
";

    private const string _subSectionInterface = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public interface ITestSubFeatures
{
    IFeatureState Feature3 { get; }
    IFeatureState Feature4 { get; }
}
";

    private const string _subSectionClass = @"// <auto-generated/>
#nullable enable

using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

partial class TestSubFeatures : ITestSubFeatures
{
    private readonly IFeatureReader _featureReader;

    public TestSubFeatures(IFeatureReader featureReader)
    {
        _featureReader = featureReader;
    }

    public IFeatureState Feature3 => _featureReader.For(""Feature3"");
    public IFeatureState Feature4 => _featureReader.For(""Feature4"");
}
";
    #endregion

    [Theory]
    [InlineData("string")]
    [InlineData("String")]
    [InlineData("System.String")]
    public async Task SourceFile_WithAClass_WithFeatureReaderDefinitionAttribute_AndAPrivateStringArrayField_InitializedWithTwoFeatures_GeneratesCode_WithTwoProperties(string arrayType) {
        var code = @$"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {{
    [Features]
    private static readonly {arrayType}[] _features = {{
        ""Feature1"",
        ""Feature2""
    }};
}}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_interfaceWithTwoProperties);
        resultedCode[1].SourceText.ToString().Should().Be(_classWithTwoProperties);
    }

    [Fact]
    public async Task SourceFile_WithOldNamespacesStyle_AndValidClass_GeneratesCode_WithTwoProperties() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests {
    [FeaturesSectionDefinition]
    public partial class TestFeatures {
        [Features]
        private static readonly string[] _features = {
            ""Feature1"",
            ""Feature2""
        };
    }
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_interfaceWithTwoProperties);
        resultedCode[1].SourceText.ToString().Should().Be(_classWithTwoProperties);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithMultipleClasses_GeneratesCode_WithSubSection() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature1"",
        ""Feature2""
    };

    [Sections]
    private static readonly string[] _sections = {
        nameof(TestSubFeatures)
    };
}

[FeaturesSectionDefinition]
public partial class TestSubFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature3"",
        ""Feature4""
    };
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(4);
        resultedCode[0].SourceText.ToString().Should().Be(_interfaceWithSubSection);
        resultedCode[1].SourceText.ToString().Should().Be(_classWithSubSection);
        resultedCode[2].SourceText.ToString().Should().Be(_subSectionInterface);
        resultedCode[3].SourceText.ToString().Should().Be(_subSectionClass);
    }


    [Fact]
    public async Task SourceFile_WithAValidClass_WithMultipleClasses_AndError_GeneratesCode_WithSubSection() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature1"",
        ""Feature2""
    };

    [Sections]
    private static readonly string[] _sections = {
        nameof(TestSubFeatures)
    };
}

[FeaturesSectionDefinition]
public partial class TestSubFeatures {
    [Features]
    private static {|#0:string|} _features;
}
";
        var stringArrayWarning = AnalyzerRunner.CreateDiagnosticResult("FG001").WithLocation(0);

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code, stringArrayWarning);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(4);
        resultedCode[0].SourceText.ToString().Should().Be(_interfaceWithSubSection);
        resultedCode[1].SourceText.ToString().Should().Be(_classWithSubSection);
        resultedCode[2].SourceText.ToString().Should().Be(_emptySubSectionInterface);
        resultedCode[3].SourceText.ToString().Should().Be(_emptySubSectionClass);
    }

    [Fact]
    public async Task SourceFile_WithoutNamespace_DoesNotGenerateCode() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature1"",
        ""Feature2""
    };
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(0);
    }

    [Fact]
    public async Task SourceFile_WithAClassWithNoAttributes_DoesNotGenerateCode() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

public partial class TestFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature1"",
        ""Feature2""
    };
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(0);
    }

    [Fact]
    public async Task SourceFile_WithAClass_WithoutFeatureReaderDefinitionAttribute_DoesNotGenerateCode() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[Obsolete]
public partial class TestFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature1"",
        ""Feature2""
    };
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(0);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithNotPrivateField_GeneratesCode_WithNoProperties() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    {|#0:public|} static readonly string[] _features = {
        ""Feature1"",
        ""Feature2""
    };
}
";
        var notPrivateWarning = AnalyzerRunner.CreateDiagnosticResult("FG002").WithLocation(0);

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code, notPrivateWarning);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterface);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClass);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithNotArrayField_GeneratesCode_WithNoProperties() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Sections]
    private static {|#0:string|} _features;
}
";
        var stringArrayWarning = AnalyzerRunner.CreateDiagnosticResult("FG001").WithLocation(0);

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code, stringArrayWarning);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterface);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClass);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithNoInitializer_GeneratesCode_WithNoProperties() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    private static readonly string[] _features;
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterface);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClass);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithAnArrayOfAnInvalidType_GeneratesCode_WithNoProperties() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    private static readonly {|#0:int[]|} _features = {
        1,
        2
    };
}
";
        var stringArrayWarning = AnalyzerRunner.CreateDiagnosticResult("FG001").WithLocation(0);

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code, stringArrayWarning);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterface);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClass);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithAnEmptyStringArray_GeneratesCode_WithNoProperties() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    [Features]
    private static readonly String[] _features = {
    };
}
";

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(2);
        resultedCode[0].SourceText.ToString().Should().Be(_emptyInterface);
        resultedCode[1].SourceText.ToString().Should().Be(_emptyClass);
    }

    [Fact]
    public async Task SourceFile_WithAValidClass_WithNonLiteralValue_GeneratesCode_WithOnlyLiteralValues() {
        const string code = @"
using System;
using StronglyTyped.FeatureFlags;

namespace SourceGeneration.Tests;

[FeaturesSectionDefinition]
public partial class TestFeatures {
    private const string _feature3 = ""Feature3"";

    [Features]
    private static readonly string[] _features = {
        ""Feature1"",
        ""Feature2"",
        {|#0:nameof(TestSubFeatures)|},
        {|#1:_feature3|},
        {|#2:$""Feature{4}""|}
    };

    [Sections]
    private static readonly string[] _sections = {
        nameof(TestSubFeatures),
        {|#3:""OtherTestSubFeatures""|},
        {|#4:_feature3|},
        {|#5:$""Feature{4}""|} 
    };
}

[FeaturesSectionDefinition]
public partial class TestSubFeatures {
    [Features]
    private static readonly string[] _features = {
        ""Feature3"",
        ""Feature4""
    };
}
";
        var literalValueWarning1 = AnalyzerRunner.CreateDiagnosticResult("FG003").WithLocation(0).WithArguments("nameof(TestSubFeatures)");
        var literalValueWarning2 = AnalyzerRunner.CreateDiagnosticResult("FG003").WithLocation(1).WithArguments("_feature3");
        var literalValueWarning3 = AnalyzerRunner.CreateDiagnosticResult("FG003").WithLocation(2).WithArguments("$\"Feature{4}\"");
        var nameofWarning1 = AnalyzerRunner.CreateDiagnosticResult("FG004").WithLocation(3).WithArguments("\"OtherTestSubFeatures\"");
        var nameofWarning2 = AnalyzerRunner.CreateDiagnosticResult("FG004").WithLocation(4).WithArguments("_feature3");
        var nameofWarning3 = AnalyzerRunner.CreateDiagnosticResult("FG004").WithLocation(5).WithArguments("$\"Feature{4}\"");

        await Helpers.AnalyzerRunner.VerifyCodeAsync(code, literalValueWarning1, literalValueWarning2, literalValueWarning3, nameofWarning1, nameofWarning2, nameofWarning3);
        var resultedCode = await Helpers.GeneratorRunner.RunAsync(code);

        resultedCode.Length.Should().Be(4);
        resultedCode[0].SourceText.ToString().Should().Be(_interfaceWithSubSection);
        resultedCode[1].SourceText.ToString().Should().Be(_classWithSubSection);
        resultedCode[2].SourceText.ToString().Should().Be(_subSectionInterface);
        resultedCode[3].SourceText.ToString().Should().Be(_subSectionClass);
    }
}
