namespace StronglyTyped.FeatureFlags.Generator;

internal class Emitter {
    private const int _defaultStringBuilderCapacity = 1024;
    private readonly StringBuilder _builder = new(_defaultStringBuilderCapacity);

    internal void EmitFiles(SourceProductionContext context, IReadOnlyList<FlagsHolder> flagsHolders) {
        foreach (var flagsHolder in flagsHolders) {
            context.CancellationToken.ThrowIfCancellationRequested();
            var interfaceCode = EmitInterface(flagsHolder);
            context.AddSource($"I{flagsHolder.Name}.g.cs", SourceText.From(interfaceCode, Encoding.UTF8));

            var classCode = EmitClass(flagsHolder);
            context.AddSource($"{flagsHolder.Name}.g.cs", SourceText.From(classCode, Encoding.UTF8));
        }
    }

    private string EmitInterface(FlagsHolder flagsHolder) {
        _builder.Clear();
        _builder.AppendLine("// <auto-generated/>");
        _builder.AppendLine("#nullable enable");
        GenInterface(flagsHolder);
        return _builder.ToString();
    }

    private string EmitClass(FlagsHolder flagsHolder) {
        _builder.Clear();
        _builder.AppendLine("// <auto-generated/>");
        _builder.AppendLine("#nullable enable");
        GenClass(flagsHolder);
        return _builder.ToString();
    }

    private void GenInterface(FlagsHolder flagsHolder) {
        _builder.Append("" +
@$"
using StronglyTyped.FeatureFlags.Abstractions;

namespace {flagsHolder.Namespace};

public interface I{flagsHolder.Name}
{{
");
        foreach (var feature in flagsHolder.Featrues) {
            _builder.Append("" +
@$"    IFeatureFlag {feature} {{ get; }}
");
        }
        _builder.Append("" +
@$"}}
");
        _builder.ToString();
    }


    private void GenClass(FlagsHolder flagsHolder) {
        _builder.Append("" +
@$"
using StronglyTyped.FeatureFlags.Abstractions;

namespace {flagsHolder.Namespace};

partial class {flagsHolder.Name} : I{flagsHolder.Name}
{{
    private readonly IFeatureFlagsFactory _featureFlagsFactory;

    public FeatureFlags(IFeatureFlagsFactory featureFlagsFactory)
    {{
        _featureFlagsFactory = featureFlagsFactory;
    }}
");

        foreach (var feature in flagsHolder.Featrues) {
            _builder.Append("" +
@$"    public IFeatureFlag {feature} => _featureFlagsFactory.For(nameof({feature}));
");
        }
        _builder.Append("" +
        @$"}}
");
    }
}
