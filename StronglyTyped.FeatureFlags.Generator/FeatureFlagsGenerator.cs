namespace StronglyTyped.FeatureFlags.Generator;

[Generator]
public class FeatureFlagsGenerator : IIncrementalGenerator {

    public void Initialize(IncrementalGeneratorInitializationContext context) {
#if DEBUG
        if (!Debugger.IsAttached) {
            Debugger.Launch();
        }
#endif
        var flagsHolderClasses = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (sn, _) => Parser.IsSyntaxTargetForGeneration(sn),
                static (ctx, _) => Parser.GetSemanticTargetForGeneration(ctx))
            .Where(type => type is not null);

        var test = flagsHolderClasses.Collect();


        var compilationAndClasses = context.CompilationProvider.Combine(flagsHolderClasses.Collect());

        context.RegisterSourceOutput(compilationAndClasses, static (spc, source) => GenerateFile(source.Left, spc, source.Right!));
    }

    private static void GenerateFile(Compilation compilation, SourceProductionContext context, ImmutableArray<ClassDeclarationSyntax> flagsHolderClasses) {
        if (flagsHolderClasses.IsDefaultOrEmpty)
            return;

        var distinctClasses = flagsHolderClasses.Distinct();
        var parser = new Parser(compilation, context.ReportDiagnostic, context.CancellationToken);
        var flagsHolders = parser.GetFlagsHolderClasses(distinctClasses);
        if (flagsHolders.Count == 0) return;

        foreach (var flagsHolder in flagsHolders) {
            //var emmiter = new Emitter();
            //string code = emmiter.Emit(flagsDescriptors, context.CancellationToken);
            var code = GenerateCode(flagsHolder);

            context.AddSource($"{flagsHolder.Name}.g.cs", SourceText.From(code, Encoding.UTF8));
        }
    }

    private static string GenerateCode(Parser.FlagsHolder flagsHolder) {
        return
@$"// <auto-generated />

using System.Collections.Generic;

namespace {flagsHolder.Namespace};

partial interface IFeatureFlagsAccessor
{{

}}

partial class {flagsHolder.Name}
{{
// Items => {string.Join(",", flagsHolder.Featrues)} 
}}
";
    }
}